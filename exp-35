import cv2
# Load the pre-trained face detection classifier (Haar Cascade)
# You can also try other models, like "lbpcascade_frontalface.xml"
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
def detect_and_count_faces(image_path):
    # Read the image from the given file path
    image = cv2.imread(image_path)
    # Convert the image to grayscale (Haar Cascade works on grayscale images)
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # Detect faces in the image
    faces = face_cascade.detectMultiScale(gray_image, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
    # Draw rectangles around the detected faces
    for (x, y, w, h) in faces:
        cv2.rectangle(image, (x, y), (x + w, y + h), (255, 0, 0), 2)
    # Display the output image with detected faces
    cv2.imshow('Detected Faces', image)
    # Print the number of faces detected
    print(f"Number of faces detected: {len(faces)}")
    # Wait for a key press to close the image window
    cv2.waitKey(0)
    cv2.destroyAllWindows()
# Path to the image
image_path = 'path_to_image.jpg'
# Call the function to detect and count faces
detect_and_count_faces(image_path)
